Object-oriented Programming
abstraction, encapsulation, inheritance, polymorphism

object: state + behavior
-- general concept of things in real world, to be represented in programming
-- a way to abstract the complex real world into "object", with relationships and interactions

class: instance variables + methods
-- software blueprints representing a type of objects
-- private instance variables + access/mutator methods to isolate/encapsulate variables

inheritance: define the "is-a" relationship between types of objects (i.e. classes).
        This is a design time consideration.

polymorphism: a method in superclass can be overridden in multiples subclasses.
        This is a run-time mechanism to find the appropriate method for a particular object in the class hierarchy.


Example code about objects and classes
1. class structure, modifier public, private (protected), static
2. method signature
    access [abstract | static] type methodName ( parameter list )
    ------ ------------------- ---- ----------   ---------------
    public void setBalance (String pass, double amount)
3. method types:
    constructor:  default, parameterized
    accessor (getter, just read a value or state):
    mutator (setter, or other making a change):
4. static vs instance methods
    "interestRate" example
    "main" in driver class
5. method overload
    method signature:  same method name but different parameter list
    multiple constructors
6. method override
    method in subclass over-ride the same method in superclass
    can not reduce visibility!
7. scope
    class, instance, method, local, parameter
    this
8. method parameters
    formal (dummy), actual
    number of parameters, corresponding type of parameter
9. passing parameters
    passing by value, passing by reference
    primitive type, object type

    In Java, it is "pass-by-value" ONLY!
    What happens when passing object? It is making a copy of the object reference (address) and give it to a new variable (method parameter)
