// Scavenger hunt: find all the errors in the program!

public Class TestBasics {                   --> class
    public static Final double _PI = 3.1415926f;   --> final
    public static int int_zero = 0;
    public static final string LABEL;       --> String
    public double point_0 = 0.0f;

    private static String SEPARATOR;
    private Int int_large = 100;        --> int
    double double_large = 10000.0;

    public void assign() {
        LABEL = "@#";
        SEPARATOR = "-";
        _PI = 3.14f;                    --> can't change it
        int_large = Math.power(2, 35);  --> valid, but not 2^35, overflew
    }

    public void calculate1 {        --> ()
        double zero1 = int_zero - point_0;
        int zero2 = 0 - point_0;    --> (int - double), double can't assign to int
    }

    public static calculate2() {    --> no return type
        int triple = int_large * 3;     --> wrong! int_large is not static, can't be referenced in a static method
        int div = double_large / int_large; --> double/int -> double, can't assign to int
        double area2 = _PI * 2 * 2;
    }

    public void calculate3() {
        int huge = int_large / int_zero;    --> arithmetic error
        int 1_zero = _PI * int_zero;    --> double -> int, 1_zero is wrong
        double 2_zero = int_zero / point_0; // NaN, 2_zero, name can't start with digit

        double void = double_large / point_0;  --> name can't be void,
    }

    public static printDigits(int num, int radix) {
        int d = num % radix;
        System.out.println(d);
        int remaining = num / radix;
        while( remaining > 0 ) {
            System.out.println( remaining % radix);
            remaining = remaining / radix;
        }
    }
}

//
// AnotherClass.compare()

public class AnotherClass {               --> ()
    public static void compare(int int1, double d2) {
        TestBasics basic = new TestBasics();

        if( TestBasics.int_zero == int1) {
            System.out.println(int1 + " is integer 0");
        }
        if( TestBasics.point_0 == d2) {
            //--> TestBasics.point_0 is wrong, point_0 is not static, but basic.point_0 is OK
            System.out.println(d2 + " is double 0.0f");
        }
        if( TestBasics.int_zero == 0 || TestBasics.point_0 == d2) { // --> compile time error
            // basic.point_0 would be fine
            System.out.println(d2 + " is double 0.0f");
        }
        if( TestBasics.int_zero == 1 || basic.point_0 == d2) {
            System.out.println(d2 + " is double 0.0f");
        }
        if( TestBasics.int_zero == 0 && basic.point_0 == d2) {
            System.out.println(d2 + " is double 0.0f");
        }
        if( TestBasics.int_zero == 1 && basic.point_0 == d2) {
            System.out.println(d2 + " is double 0.0f");
        }
        if( TestBasics._PI == TestBasics._PI * 1.0f ) {
            // valid, but logic likely not equal
            System.out.println("is equal");
        }
        if( TestBasics.LABEL == "@#" ) {    --> String comparison: s1.equals(s2)
            System.out.println("The label is @#");
        }
    }

    public void change() {
        TestBasics.LABEL = "&#";    // --> LABEL is final
        TestBasics.SEPARATOR = "."; --> private!
        TestBasics.int_zero = 1;    // fine
    }

    public void convert() {
        TestBasics.printDigits(123, 10);
        // 123%10 ->3, 123/10=>12%10 -> 2, 1....  3, 2, 1

        TestBasics.printDigits(123, 2);
        // 123%2-> 1, 61%2->1, 30%2-> 0, 15%2-> 1, 7%2 -> 1, 3%2-> 1, 1
        1111011
        64+32+16+8+2+1 ==> 123
        TestBasics.printDigits(123, 8);

        TestBasics.printDigits(123, 16);
    }
}


some data conversion:
binary: 11010101 -> decimal:     128+64+16+4+1  =
binary: 1101,0101 -> hexdecimal: C5
binary: 11,010,101 -> octal: 325

decimal: 234 -> binary:
decimal: 234 -> octal:
decimal: 234 -> hexdecimal:

hexdecimal: E8 -> binary:  11,101,000
hexdecimal: E8 -> octal:   350
hexdecimal: E8 -> decimal:
