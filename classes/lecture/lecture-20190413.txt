Sorting & Searching

Animations of algorithms:
https://www.cs.usfca.edu/~galles/visualization/Search.html
https://www.toptal.com/developers/sorting-algorithms


Selection, Insertion, Merge sort, Quick sort
https://en.wikipedia.org/wiki/Merge_sort

https://en.wikipedia.org/wiki/Binary_search_algorithm
Sequential, Binary search
Analysis: best, worse, average case
Time / Space

sequential: O(N)
for(int i=0; i<N; i++) {
}

binary Search: log2(N)
values[HIGH];
binarySearch(int low, int high, int value)
{
    if( low >= high ) {
        return "no found";
    }
    int mid = (low + high)/2;
    if( values[mid] == value)
        return mid;
    else if ( value < values[mid]) {
        return binarySearch(low, mid, value);
    }
    else {
        return binarySearch(mid, high, value);
    }
}

function binary_search(A, n, T):
    L := 0
    R := n âˆ’ 1
    while L <= R:
        m := floor((L + R) / 2)
        if A[m] < T:
            L := m + 1
        else if A[m] > T:
            R := m - 1
        else:
            return m
    return unsuccessful


Sorting/Search implemented in Java Collections API
https://docs.oracle.com/javase/tutorial/collections/algorithms/index.html
